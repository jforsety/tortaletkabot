import asyncio
import logging
import os
from datetime import datetime

from aiogram.exceptions import TelegramAPIError
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from dotenv import load_dotenv

from aiogram.types import CallbackQuery
from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters.command import Command

from app_bot.api_ai import start_gigachat
from app_bot.database import add_user, profile_exists, referral_reg, update_attempts, update_attempts_admin, \
    get_users_id
from app_bot.keyboards import check_sub_menu, get_referral_keyboard, admin_btn
from app_bot.text_bot.text import start_text, not_sub_message, instruction_text, admin_message, attempts_text


logger = logging.getLogger(__name__)

load_dotenv()
# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token=os.environ.get("TOKEN_BOT"), default=DefaultBotProperties(parse_mode=ParseMode.HTML))

# –î–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
SEND_DELAY = 0.8  # –ú–æ–∂–Ω–æ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞—Ç—å –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
def check_sub_channel(chat_member):
    if chat_member.status != 'left':
        return True
    else:
        return False


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = AsyncIOScheduler(timezone="Europe/Moscow")


# –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á
def setup_scheduler():
    scheduler.add_job(
        update_attempts,
        "cron",
        hour=0,
        minute=1,
        start_date=datetime.now()
    )


# –í—ã–∑–æ–≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á (–ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è)
setup_scheduler()


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    referral_id = None
    if message.chat.type == 'private':
        if check_sub_channel(
                await bot.get_chat_member(chat_id=os.environ.get("CHANNEL_ID"), user_id=message.from_user.id)):
            add_user(message)
            if len(message.text.split()) > 1:
                referral_id = message.text.split()[1].replace("ref_", "")
            if referral_id and referral_id.isdigit():
                referral_reg(message, referral_id)
            await message.answer(start_text)
        else:
            await message.answer(not_sub_message, reply_markup=check_sub_menu)


@dp.message(Command("instruction"))
async def cmd_instruction(message: types.Message):
    keyboard = get_referral_keyboard(
        user_id=message.from_user.id,
        bot_url=os.environ.get("URL_BOT")
    )
    if message.chat.type == 'private':
        if check_sub_channel(
                await bot.get_chat_member(chat_id=os.environ.get("CHANNEL_ID"), user_id=message.from_user.id)):
            await message.answer(instruction_text, reply_markup=keyboard)
        else:
            await message.answer(not_sub_message, reply_markup=check_sub_menu)


@dp.message(Command("profile"))
async def cmd_profile(message: types.Message):
    keyboard = get_referral_keyboard(
        user_id=message.from_user.id,
        bot_url=os.environ.get("URL_BOT")
    )
    if message.chat.type == 'private':
        if check_sub_channel(
                await bot.get_chat_member(chat_id=os.environ.get("CHANNEL_ID"), user_id=message.from_user.id)):
            profile_list = profile_exists(message)
            await message.answer(text=f"<b>üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n"
                                      f"<b>ID:</b> {profile_list[0][1]}\n"
                                      f"<b>–ò–º—è:</b> {profile_list[0][2]}\n"
                                      f"<b>–†–µ—Ñ–µ—Ä–∞–ª—ã:</b> {profile_list[0][6]}\n"
                                    # f"<b>–ü–æ–¥–ø–∏—Å–∫–∞:</b> {profile_list[0][5]}\n"
                                      f"<b>–ü–æ–ø—ã—Ç–∫–∏:</b> {profile_list[0][5]}\n"
                                      f"<i>*–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ "
                                      f"–¥–∞—ë—Ç—Å—è 10 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤*</i>", reply_markup=keyboard)
        else:
            await message.answer(not_sub_message, reply_markup=check_sub_menu)


@dp.message(Command("admin"))
async def cmd_admin(message: types.Message):
    if message.chat.type == 'private':
        if message.from_user.id == int(os.environ.get("ADMIN_ID")):
            logger.info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã admin - {message.from_user.id}")
            await message.answer(admin_message, reply_markup=admin_btn)
        else:
            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É admin –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–æ—Å—Ç—É–ø–æ–≤: {message.from_user.id}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û–ë–ù–û–í–ò–¢–¨ –ü–û–ü–´–¢–ö–ò (–í–°–ï)"
@dp.callback_query(F.data == "update_1")
async def start_update_attempts(call: types.CallbackQuery):
    await update_attempts()
    await call.message.answer(attempts_text)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û–ë–ù–û–í–ò–¢–¨ –ü–û–ü–´–¢–ö–ò (–ê–î–ú)"
@dp.callback_query(F.data == "update_2")
async def start_update_admin(call: types.CallbackQuery):
    update_attempts_admin()
    await call.message.answer(attempts_text)


class SendMessagesState(StatesGroup):
    waiting_for_content = State()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û–¢–ü–†–ê–í–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø (–í–°–ï)"
@dp.callback_query(F.data == "send_messages")
async def start_send_messages(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
    await state.set_state(SendMessagesState.waiting_for_content)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
@dp.message(SendMessagesState.waiting_for_content, F.photo | F.text)
async def process_content(message: types.Message, state: FSMContext, bot: Bot):
    try:
        if not message.photo:
            await message.answer("–ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º!")
            return

        photo_id = message.photo[-1].file_id
        caption = message.caption if message.caption else ""

        users = get_users_id()
        success = 0
        failed = 0
        total_users = len(users)

        for index, user in enumerate(users):
            try:
                await bot.send_photo(
                    chat_id=user[0],
                    photo=photo_id,
                    caption=caption
                )
                success += 1
            except TelegramAPIError as e:
                logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user[0]}: {e}")
                failed += 1
            except Exception as e:
                logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
                failed += 1

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π
            if index < total_users - 1:
                await asyncio.sleep(SEND_DELAY)

        await message.answer(
            f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"–£—Å–ø–µ—à–Ω–æ: {success}\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å: {failed}"
        )

    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {str(e)}")
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞
@dp.message(SendMessagesState.waiting_for_content)
async def invalid_content(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º!")


@dp.message()
async def message_handler(message: types.Message):
    if message.chat.type == 'private':
        if check_sub_channel(
                await bot.get_chat_member(chat_id=os.environ.get("CHANNEL_ID"), user_id=message.from_user.id)):
            await message.answer(start_gigachat(message), parse_mode="Markdown")
        else:
            await message.answer(not_sub_message, reply_markup=check_sub_menu)
